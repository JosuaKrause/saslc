# University Konstanz                        Exercises for the Course
# Database & Information Systems Group          Compiler Construction
# Marc Scholl, Stefan Klinger                             Winter 2010

# Exercise 1


#####################################################################

# Remarks:

# In the following, and during the lecture, we will use the
# symbol '→' to denote the process of evaluating an expression:
#
#   3 + 4  →  7
#
# We pronounce this “three plus four evaluates to seven” or
# “...reduces to seven”. 

# Although you don't have a syntax checker, try to stick to the
# syntax rules when answering the questions below. This helps you
# thinking about the SASL language.


#--------------------------------------------------------------------


# Write the identity function 'id', so that  id 4 → 4.

id x = x;


#--------------------------------------------------------------------


# Write a function 'even' that returns whether its numeric argument
# is even.
#
#   even 3  →  false
#   even 4  →  true

even x = x % 2 == 0;


#--------------------------------------------------------------------


# Write a function 'twice' which applies its first argument two times
# to its second.
#
#   twice sqrt 81  →  sqrt (sqrt 81)  →  sqrt 9  →  3

twice f x = f @ f x;


#--------------------------------------------------------------------


# Write a function that calculates the lenght of a list.
#
#   length [] → 0
#   length ["bla",1,2] → 3

length l
    = if l == []
      then 0
      else 1 + length (tl l)
    ;


#--------------------------------------------------------------------


# SASL syntax: Why is a semicolon required at the end of each
# definition?

# Newlines in SASL are handled just as normal whitespace is. Hence,
# without semicolon, the compiler would not be able to distinguish
# the code on the left hand side from the code on the right hand
# side:
#
#   f a b = a + b                     f a b = a + b g
#   g y z = f z z                     y z = f z z
#
# Left: The programmer intended       Right: 'b' is applied to 'g'
# to define two functions, 'f'        before adding 'a'.
# and 'g'.


#--------------------------------------------------------------------


# Write a function 'fib' that calculates the Fibonacci number 'f_n'.
#
#   fib 6 → 8

fib n
    = if n == 0
      then 0
      else if n == 1
           then 1
           else fib (n-1) + fib (n-2)
    ;
              
              
#--------------------------------------------------------------------


# Write a function 'take' that returns the first 'n' elements of a
# list. Do this without looking into the SASL manual ;-)
#
#   take 5 one → [1,2,1,2,1]

one = 1 : two;
two = 2 : one;

take n xs
    = if n == 0
      then []
      else hd xs : take (n-1) @ tl xs
    ;


# A version that don't fail on a short list:

safeTake n xs
    = if n == 0 | xs == []
      then []
      else hd xs : safeTake (n-1) @ tl xs
    ;


# Write the analoguous function 'drop' which drops the first 'n'
# elements of a list.
#
#   drop 3 [1,2,3,4,5]  →  [4,5]

drop n xs
    = if n == 0
      then xs
      else drop (n-1) @ tl xs
    ;


# A version that don't fail on a short list:

safeDrop n xs
    = if n == 0 | xs == []
      then xs
      else safeDrop (n-1) @ tl xs
    ;


#---------------------------------------------------------------------


# Write a function 'nfib' that calculates the first 'n' Fibonacci
# numbers, and returns them all.

fibs
    = let helper a b = a : helper b (a+b)
      in helper 0 1
    ;

nfib n = take n fibs ;


# can you write a more elegant version of 'fib' from above?

fib1 n = hd @ drop n fibs;

# Which one is more efficient? 'fib1'
# Why? 'fib' repeatedly calculates the same Fibonacci number.


#--------------------------------------------------------------------


# What does the following function do?

map f list
    = if list == []
      then []
      else let x = hd list
             , xs = tl list
           in f x : map f xs
    ;

# What result would you expect the expression
#
#   map even [1,2,3,4,5]  →  [false,true,false,true,false]
#
# to evaluate to? If you don't “see” the answer by looking at the
# function, try to evaluate 'map f []', 'map f [1]', 'map f [1,2]',
# and so on by hand.


#--------------------------------------------------------------------


# Write a function 'first' that returns the first element from a
# list, for which a provided predicate holds. The result may be
# undefined if no such element exists.
#
#   first even [1,7,9,5,3,6,4,5,8,7,9]  →  6

first p xs
    = let x = hd xs
      in if p x
         then x
         else first p @ tl xs
      ;


# What about a version that don't fail if no such element exists?

first1 f list
    = if list == []
      then ~1
      else let x = hd list
             , xs = tl list
           in if f x
              then x
              else first1 f xs
    ;

# Now
#
#   first1 even [1,7,9,5,3,65,5,7,9]  →  -1
#
# but what about
#
#   first1 negative [1,2,3]  ?
#
# Better approach: Do not define the default value:

first2 z f list
    = if list == []
      then z
      else let x = hd list
             , xs = tl list
           in if f x
              then x
              else first2 z f xs
    ;

# now we have
#
#   first2 "none" even [1, ~1, 3]  →  "none"
#   first2 "none" even [1, ~1, 4]  →  4
#
# Another approach: Pack result into a list. Empty list indicates
# “no such element”.

first3 f list
    = if list == []
      then []
      else let x = hd list
             , xs = tl list
           in if f x
              then [x]
              else first3 f xs
    ;


#####################################################################


# Concatenate two lists:

concat a b
    = if a == []
      then b
      else hd a : concat (tl a) b
    ;

# Runtime: Linear in the length of the first argument.


# Reverse a list:

reverse0 a
    = if a == []
      then []
      else concat (reverse0 @ tl a) [hd a]
    ;

# Runtime: Quadratic in the length of the argument.

reverse list
    = let shunt xs ys
              = if ys == []
                then xs
                else shunt (hd ys : xs) (tl ys)
      in shunt [] list
    ;

# Runtime: Linear in the length of the argument.
