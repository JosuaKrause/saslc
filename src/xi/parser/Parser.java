
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 12 12:12:24 CET 2010
//----------------------------------------------------

package xi.parser;

import xi.ast.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 12 12:12:24 CET 2010
  */
@SuppressWarnings("all")
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\002\000\002\005\004" +
    "\000\002\005\004\000\002\006\006\000\002\006\003\000" +
    "\002\004\006\000\002\004\004\000\002\007\010\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\011" +
    "\004\000\002\011\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\013\004\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\010\004\000\002\010" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\016\005\000" +
    "\002\016\004\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\002\ufffd\003\004\050\007\001\002\000" +
    "\004\043\141\001\002\000\004\002\001\001\002\000\004" +
    "\002\140\001\002\000\006\044\010\050\012\001\002\000" +
    "\032\024\026\025\040\026\032\030\021\032\023\034\030" +
    "\037\035\046\031\047\033\050\027\051\036\052\025\001" +
    "\002\000\004\043\014\001\002\000\006\044\010\050\012" +
    "\001\002\000\010\040\ufffb\042\ufffb\043\ufffb\001\002\000" +
    "\010\002\ufffd\003\004\050\007\001\002\000\004\002\uffff" +
    "\001\002\000\064\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\027\ufff5\031" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5\043\ufff5" +
    "\045\ufff5\001\002\000\064\004\050\005\042\006\055\007" +
    "\053\010\045\011\047\012\057\013\060\014\054\015\052" +
    "\016\044\017\043\020\061\021\062\022\056\023\051\027" +
    "\ufff9\031\ufff9\033\ufff9\035\ufff9\036\ufff9\040\ufff9\042\ufff9" +
    "\043\ufff9\045\046\001\002\000\010\040\ufffc\042\ufffc\043" +
    "\ufffc\001\002\000\032\024\026\025\040\026\032\030\021" +
    "\032\023\034\030\037\035\046\031\047\033\050\027\051" +
    "\036\052\025\001\002\000\104\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\036\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\006\041" +
    "\130\050\132\001\002\000\104\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\026\032\027\ufff3\030\021\031\ufff3\032\023\033\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\046\031" +
    "\047\033\050\027\051\036\052\025\001\002\000\104\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\036\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\001\002\000\030\024\026\025\040\026\032\030\021\032" +
    "\023\034\030\046\031\047\033\050\027\051\036\052\025" +
    "\001\002\000\104\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd" +
    "\040\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\001\002\000\032\024\026\025\040" +
    "\026\032\030\021\032\023\034\030\037\035\046\031\047" +
    "\033\050\027\051\036\052\025\001\002\000\104\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\036\uffd7\040\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\001" +
    "\002\000\034\024\026\025\040\026\032\027\114\030\021" +
    "\032\023\034\030\037\035\046\031\047\033\050\027\051" +
    "\036\052\025\001\002\000\104\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000\104\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\035\uffde\036\uffde\040\uffde\042\uffde\043" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\001\002\000\004\050\105\001\002\000\104\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\035\uffd5\036\uffd5\040\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\001\002" +
    "\000\064\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\027\ufff4\031\ufff4\033" +
    "\ufff4\035\ufff4\036\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4" +
    "\001\002\000\030\024\026\025\040\026\032\030\021\032" +
    "\023\034\030\046\031\047\033\050\027\051\036\052\025" +
    "\001\002\000\064\004\050\005\042\006\055\007\053\010" +
    "\045\011\047\012\057\013\060\014\054\015\052\016\044" +
    "\017\043\020\061\021\062\022\056\023\051\027\ufff1\031" +
    "\ufff1\033\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1\043\ufff1" +
    "\045\046\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\030\024\026\025\040\026\032\030" +
    "\021\032\023\034\030\046\031\047\033\050\027\051\036" +
    "\052\025\001\002\000\064\004\050\005\042\006\055\007" +
    "\053\010\045\011\047\012\057\013\060\014\054\015\052" +
    "\016\044\017\043\020\061\021\062\022\uffe3\023\uffe3\027" +
    "\uffe3\031\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\045\046\001\002\000\064\004\050\005\042\006" +
    "\055\007\053\010\045\011\047\012\057\013\060\014\054" +
    "\015\052\016\044\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\027\uffe4\031\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\045\046\001\002\000\050\004\050\005" +
    "\042\006\055\007\053\010\045\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\027\uffe9\031\uffe9\033\uffe9\035\uffe9\036" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\045\046\001\002\000\050" +
    "\004\050\005\042\006\055\007\053\010\045\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\027\uffea\031\uffea\033\uffea" +
    "\035\uffea\036\uffea\040\uffea\042\uffea\043\uffea\045\046\001" +
    "\002\000\064\004\050\005\042\006\055\007\053\010\045" +
    "\011\047\012\057\013\060\014\054\015\052\016\044\017" +
    "\043\020\061\021\062\022\056\023\051\027\uffe1\031\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\040\uffe1\042\uffe1\043\uffe1\045" +
    "\046\001\002\000\064\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\027\uffee" +
    "\031\uffee\033\uffee\035\uffee\036\uffee\040\uffee\042\uffee\043" +
    "\uffee\045\046\001\002\000\050\004\050\005\042\006\055" +
    "\007\053\010\045\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\027\uffe8\031\uffe8\033\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\042\uffe8\043\uffe8\045\046\001\002\000\064\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\027\uffed\031\uffed\033\uffed\035\uffed\036\uffed" +
    "\040\uffed\042\uffed\043\uffed\045\046\001\002\000\050\004" +
    "\050\005\042\006\055\007\053\010\045\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\027\uffe7\031\uffe7\033\uffe7\035" +
    "\uffe7\036\uffe7\040\uffe7\042\uffe7\043\uffe7\045\046\001\002" +
    "\000\064\004\050\005\042\006\055\007\053\010\045\011" +
    "\047\012\057\013\060\014\054\015\052\016\044\017\043" +
    "\020\061\021\062\022\056\023\051\027\uffe2\031\uffe2\033" +
    "\uffe2\035\uffe2\036\uffe2\040\uffe2\042\uffe2\043\uffe2\045\046" +
    "\001\002\000\064\004\ufff0\005\ufff0\006\055\007\053\010" +
    "\045\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\027\ufff0\031" +
    "\ufff0\033\ufff0\035\ufff0\036\ufff0\040\ufff0\042\ufff0\043\ufff0" +
    "\045\046\001\002\000\050\004\050\005\042\006\055\007" +
    "\053\010\045\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\027\uffeb\031\uffeb\033\uffeb\035\uffeb\036\uffeb\040\uffeb\042" +
    "\uffeb\043\uffeb\045\046\001\002\000\064\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\027\uffe0\031\uffe0\033\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\042\uffe0\043\uffe0\045\046\001\002\000\064\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\027\uffec\031\uffec\033\uffec\035\uffec\036" +
    "\uffec\040\uffec\042\uffec\043\uffec\045\046\001\002\000\050" +
    "\004\050\005\042\006\055\007\053\010\045\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\031\uffe6\033\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\042\uffe6\043\uffe6\045\046\001" +
    "\002\000\064\004\050\005\042\006\055\007\053\010\045" +
    "\011\047\012\057\013\060\014\054\015\052\016\044\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027\uffe5\031\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\040\uffe5\042\uffe5\043\uffe5\045" +
    "\046\001\002\000\064\004\uffef\005\uffef\006\055\007\053" +
    "\010\045\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\027\uffef" +
    "\031\uffef\033\uffef\035\uffef\036\uffef\040\uffef\042\uffef\043" +
    "\uffef\045\046\001\002\000\004\040\111\001\002\000\006" +
    "\044\010\050\012\001\002\000\006\040\ufff7\042\107\001" +
    "\002\000\004\050\105\001\002\000\004\040\ufff8\001\002" +
    "\000\032\024\026\025\040\026\032\030\021\032\023\034" +
    "\030\037\035\046\031\047\033\050\027\051\036\052\025" +
    "\001\002\000\064\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\027\ufffa\031" +
    "\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa\042\ufffa\043\ufffa" +
    "\045\ufffa\001\002\000\006\027\117\042\116\001\002\000" +
    "\104\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0\042" +
    "\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\001\002\000\104\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\001\002\000\034\024\026" +
    "\025\040\026\032\027\114\030\021\032\023\034\030\037" +
    "\035\046\031\047\033\050\027\051\036\052\025\001\002" +
    "\000\104\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\001\002\000\104\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035" +
    "\uffd2\036\uffd2\040\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\001\002\000\004\035" +
    "\122\001\002\000\032\024\026\025\040\026\032\030\021" +
    "\032\023\034\030\037\035\046\031\047\033\050\027\051" +
    "\036\052\025\001\002\000\004\036\124\001\002\000\032" +
    "\024\026\025\040\026\032\030\021\032\023\034\030\037" +
    "\035\046\031\047\033\050\027\051\036\052\025\001\002" +
    "\000\064\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\027\ufff6\031\ufff6\033" +
    "\ufff6\035\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\001\002\000\064\004\050\005\042\006\055\007\053\010" +
    "\045\011\047\012\057\013\060\014\054\015\052\016\044" +
    "\017\043\020\061\021\062\022\056\023\051\027\ufff2\031" +
    "\ufff2\033\ufff2\035\ufff2\036\ufff2\040\ufff2\042\ufff2\043\ufff2" +
    "\045\046\001\002\000\104\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\032\024\026" +
    "\025\040\026\032\030\021\032\023\034\030\037\035\046" +
    "\031\047\033\050\027\051\036\052\025\001\002\000\004" +
    "\033\134\001\002\000\006\041\130\050\132\001\002\000" +
    "\004\033\uffd9\001\002\000\104\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\036\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\001\002\000\004\033" +
    "\uffd8\001\002\000\004\031\137\001\002\000\104\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\035\uffda\036\uffda\040\uffda\042\uffda\043\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\001" +
    "\002\000\004\002\000\001\002\000\010\002\ufffd\003\004" +
    "\050\007\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\010" +
    "\001\001\000\020\006\017\007\016\011\015\012\036\013" +
    "\023\014\033\015\021\001\001\000\002\001\001\000\004" +
    "\005\012\001\001\000\002\001\001\000\004\003\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\135\007\016\011\015\012" +
    "\036\013\023\014\033\015\021\001\001\000\002\001\001" +
    "\000\004\010\130\001\001\000\006\014\126\015\021\001" +
    "\001\000\002\001\001\000\016\007\125\011\015\012\036" +
    "\013\023\014\033\015\021\001\001\000\002\001\001\000" +
    "\020\006\120\007\016\011\015\012\036\013\023\014\033" +
    "\015\021\001\001\000\002\001\001\000\022\006\112\007" +
    "\016\011\015\012\036\013\023\014\033\015\021\016\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\040\011\015\012\036\013\023\014\033\015\021\001" +
    "\001\000\002\001\001\000\016\007\102\011\015\012\036" +
    "\013\023\014\033\015\021\001\001\000\016\007\101\011" +
    "\015\012\036\013\023\014\033\015\021\001\001\000\016" +
    "\007\100\011\015\012\036\013\023\014\033\015\021\001" +
    "\001\000\016\007\077\011\015\012\036\013\023\014\033" +
    "\015\021\001\001\000\016\007\076\011\015\012\036\013" +
    "\023\014\033\015\021\001\001\000\016\007\075\011\015" +
    "\012\036\013\023\014\033\015\021\001\001\000\016\007" +
    "\074\011\015\012\036\013\023\014\033\015\021\001\001" +
    "\000\016\007\073\011\015\012\036\013\023\014\033\015" +
    "\021\001\001\000\016\007\072\011\015\012\036\013\023" +
    "\014\033\015\021\001\001\000\016\007\071\011\015\012" +
    "\036\013\023\014\033\015\021\001\001\000\016\007\070" +
    "\011\015\012\036\013\023\014\033\015\021\001\001\000" +
    "\016\007\067\011\015\012\036\013\023\014\033\015\021" +
    "\001\001\000\016\007\066\011\015\012\036\013\023\014" +
    "\033\015\021\001\001\000\016\007\065\011\015\012\036" +
    "\013\023\014\033\015\021\001\001\000\016\007\064\011" +
    "\015\012\036\013\023\014\033\015\021\001\001\000\016" +
    "\007\063\011\015\012\036\013\023\014\033\015\021\001" +
    "\001\000\016\007\062\011\015\012\036\013\023\014\033" +
    "\015\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\105\001\001\000\002\001\001\000\004\004\107\001" +
    "\001\000\002\001\001\000\020\006\111\007\016\011\015" +
    "\012\036\013\023\014\033\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\112\007\016\011\015\012\036\013\023\014" +
    "\033\015\021\016\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\122\007\016\011" +
    "\015\012\036\013\023\014\033\015\021\001\001\000\002" +
    "\001\001\000\020\006\124\007\016\011\015\012\036\013" +
    "\023\014\033\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\134\007\016\011" +
    "\015\012\036\013\023\014\033\015\021\001\001\000\002" +
    "\001\001\000\004\010\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\141\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    public Module parseValue() throws Exception {
        final Module m = (Module) parse().value;
        if (!err.isEmpty()) {
            final StringBuilder sb = new StringBuilder();
            for (final ParseError pe : err) {
                final Symbol s = pe.getSymbol();
                sb.append("Error: ");
                sb.append(pe.getMessage());
                sb.append(" for ");
                sb.append(xi.lexer.Lexer.getPrettySymbol(s));
                sb.append(" at ");
                sb.append(xi.lexer.Lexer.getPosition(s));
                sb.append(xi.util.StringUtils.NL);
            }
            throw new Exception(sb.toString());
        }
        return m;
    }

    public Module addDefinition(final Module m, final String nm, final Expr e) {
    	final Name n = Name.valueOf(nm);
        if (e == ParseError.expr) {
            return m;
        }
        try {
            m.addDefinition(n, e);
        } catch (final Exception ex) {
            final java_cup.runtime.Symbol s = symbolFactory.newSymbol("DEF",
                    Terminal.DEF, m.getForName(n));
            report_error("Duplicate definition \"" + n + "\"", s);
        }
        return m;
    }

    public final java.util.List<ParseError> err = new LinkedList<ParseError>();

    public ParseError addError(final Symbol sym, final String msg) {
        final ParseError e = new ParseError(sym, msg);
        err.add(e);
        return e;
    }

    public void report_error(final String message, final Object info) {
        if (info instanceof Symbol) {
            final Symbol s = (Symbol) info;
            addError(s, message);
            return;
        }
        super.report_error(message, info);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list ::= BRACK_R 
            {
              Expr RESULT =null;
		 RESULT = BuiltIn.NIL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list ::= expr BRACK_R 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = BuiltIn.CONS.app(e, BuiltIn.NIL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list ::= expr COMMA list 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.CONS.app(e, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constant ::= BRACK_L list 
            {
              Expr RESULT =null;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant ::= CHAR 
            {
              Expr RESULT =null;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Char.valueOf(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // constant ::= STR 
            {
              Expr RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Str.fromString(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // constant ::= BLN 
            {
              Expr RESULT =null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Bool.valueOf(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // constant ::= NUM 
            {
              Expr RESULT =null;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Num.valueOf(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lambdaexpr ::= TO expr 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaexpr",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lambdaexpr ::= NAME lambdaexpr 
            {
              Expr RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lambda(n, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaexpr",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple ::= PAR_L expr PAR_R 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple ::= BRACE_L lambdaexpr BRACE_R 
            {
              Expr RESULT =null;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple ::= constant 
            {
              Expr RESULT =null;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple ::= NAME 
            {
              Expr RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Name.valueOf(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comb ::= simple 
            {
              Expr RESULT =null;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comb",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comb ::= comb simple 
            {
              Expr RESULT =null;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = App.create(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comb",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // infixexpr ::= condexpr COMP condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 final Name n = Name.createName();
                                                 RESULT = new Lambda(n.toString(), App.create(x, App.create(y, n))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // infixexpr ::= condexpr APP condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = App.create(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // infixexpr ::= condexpr SEQ condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.SEQ.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // infixexpr ::= condexpr CONS condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.CONS.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // infixexpr ::= condexpr OR condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.OR.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // infixexpr ::= condexpr AND condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.AND.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // infixexpr ::= condexpr GE condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.GE.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // infixexpr ::= condexpr LE condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.LE.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // infixexpr ::= condexpr GT condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.GT.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // infixexpr ::= condexpr LT condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.LT.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // infixexpr ::= condexpr NE condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.NE.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // infixexpr ::= condexpr EQ condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.EQ.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // infixexpr ::= condexpr MOD condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.MOD.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // infixexpr ::= condexpr DIV condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.DIV.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // infixexpr ::= condexpr TIMES condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.TIMES.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // infixexpr ::= condexpr MINUS condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.MINUS.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // infixexpr ::= condexpr PLUS condexpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr y = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.PLUS.app(x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("infixexpr",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prefixexpr ::= UMINUS condexpr 
            {
              Expr RESULT =null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.UMINUS.app(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexpr",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prefixexpr ::= NOT condexpr 
            {
              Expr RESULT =null;
		Expr o = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.NOT.app(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexpr",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condexpr ::= comb 
            {
              Expr RESULT =null;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condexpr ::= infixexpr 
            {
              Expr RESULT =null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condexpr ::= prefixexpr 
            {
              Expr RESULT =null;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condexpr ::= IF expr THEN expr ELSE expr 
            {
              Expr RESULT =null;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BuiltIn.BRANCH.app(i, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // defs ::= NAME def 
            {
              Module RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expr d = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.addDefinition(new Module(false), n, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defs",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defs ::= NAME def COMMA defs 
            {
              Module RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr d = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Module ds = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.addDefinition(ds, n, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defs",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= condexpr 
            {
              Expr RESULT =null;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LET defs IN expr 
            {
              Expr RESULT =null;
		Module ds = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LetIn(ds, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def ::= NAME def 
            {
              Expr RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expr d = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lambda(n, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= DEF expr 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module ::= 
            {
              Module RESULT =null;
		 RESULT = new Module(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= error SEMI module 
            {
              Module RESULT =null;
		Module m = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.addDefinition(m, "$ERROR$", ParseError.expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= NAME def SEMI module 
            {
              Module RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr d = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Module m = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.addDefinition(m, n, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sasl EOF 
            {
              Object RESULT =null;
		Module start_val = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sasl ::= module 
            {
              Module RESULT =null;
		Module m = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sasl",0, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

