//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 20 12:14:31 CET 2010
//----------------------------------------------------

package xi.parser;

import java.math.BigInteger;
import java.util.LinkedList;

import java_cup.runtime.Symbol;
import xi.ast.App;
import xi.ast.Bool;
import xi.ast.BuiltIn;
import xi.ast.Char;
import xi.ast.Expr;
import xi.ast.Lambda;
import xi.ast.LetIn;
import xi.ast.Module;
import xi.ast.Name;
import xi.ast.Num;
import xi.ast.Str;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Mon Dec 20 12:14:31 CET 2010
 */
@SuppressWarnings("all")
public class Parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public Parser(final java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public Parser(final java_cup.runtime.Scanner s,
            final java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\101\000\002\002\003\000\002\002\004\000\002\003"
            + "\006\000\002\003\005\000\002\003\002\000\002\005\004"
            + "\000\002\005\004\000\002\006\006\000\002\006\003\000"
            + "\002\004\006\000\002\004\004\000\002\007\010\000\002"
            + "\007\003\000\002\007\003\000\002\007\003\000\002\011"
            + "\004\000\002\011\004\000\002\012\005\000\002\012\005"
            + "\000\002\012\005\000\002\012\005\000\002\012\005\000"
            + "\002\012\005\000\002\012\005\000\002\012\005\000\002"
            + "\012\005\000\002\012\005\000\002\012\005\000\002\012"
            + "\005\000\002\012\005\000\002\012\005\000\002\012\005"
            + "\000\002\012\005\000\002\012\005\000\002\012\005\000"
            + "\002\013\004\000\002\013\003\000\002\014\003\000\002"
            + "\014\003\000\002\014\005\000\002\014\005\000\002\010"
            + "\004\000\002\010\005\000\002\015\003\000\002\015\003"
            + "\000\002\015\003\000\002\015\003\000\002\015\004\000"
            + "\002\016\005\000\002\016\005\000\002\016\006\000\002"
            + "\016\004\000\002\016\003\000\002\021\005\000\002\021"
            + "\003\000\002\017\005\000\002\017\004\000\002\017\003"
            + "\000\002\020\004\000\002\020\003\000\002\022\005\000"
            + "\002\022\003\000\002\023\005\000\002\023\005\000\002"
            + "\023\003" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\174\000\010\002\ufffd\003\004\052\007\001\002\000"
            + "\004\044\175\001\002\000\004\002\001\001\002\000\004"
            + "\002\174\001\002\000\006\045\010\052\012\001\002\000"
            + "\032\024\026\025\040\026\032\030\021\032\023\034\030"
            + "\037\035\050\031\051\034\052\027\054\036\055\025\001"
            + "\002\000\004\044\014\001\002\000\006\045\010\052\012"
            + "\001\002\000\010\040\ufffb\043\ufffb\044\ufffb\001\002\000"
            + "\010\002\ufffd\003\004\052\007\001\002\000\004\002\uffff"
            + "\001\002\000\070\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010"
            + "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5"
            + "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\027\ufff5\031"
            + "\ufff5\033\ufff5\035\ufff5\036\ufff5\040\ufff5\043\ufff5\044\ufff5"
            + "\046\ufff5\047\ufff5\053\ufff5\001\002\000\070\004\047\005"
            + "\062\006\042\007\057\010\043\011\063\012\046\013\045"
            + "\014\053\015\054\016\061\017\044\020\050\021\055\022"
            + "\056\023\060\027\ufff9\031\ufff9\033\ufff9\035\ufff9\036\ufff9"
            + "\040\ufff9\043\ufff9\044\ufff9\046\051\047\ufff9\053\052\001"
            + "\002\000\010\040\ufffc\043\ufffc\044\ufffc\001\002\000\032"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\037"
            + "\035\050\031\051\034\052\027\054\036\055\025\001\002"
            + "\000\110\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011"
            + "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb"
            + "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030"
            + "\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\040\uffdb"
            + "\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052"
            + "\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\004\052\165"
            + "\001\002\000\110\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010"
            + "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3"
            + "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\026\032\027"
            + "\ufff3\030\021\031\ufff3\032\023\033\ufff3\035\ufff3\036\ufff3"
            + "\040\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\050\031\051"
            + "\034\052\027\053\ufff3\054\036\055\025\001\002\000\110"
            + "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012"
            + "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3"
            + "\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031"
            + "\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3\043\uffd3"
            + "\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053"
            + "\uffd3\054\uffd3\055\uffd3\001\002\000\030\024\026\025\040"
            + "\026\032\030\021\032\023\034\030\050\031\051\034\052"
            + "\027\054\036\055\025\001\002\000\110\004\uffdc\005\uffdc"
            + "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014"
            + "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc"
            + "\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033"
            + "\uffdc\035\uffdc\036\uffdc\040\uffdc\043\uffdc\044\uffdc\046\uffdc"
            + "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055"
            + "\uffdc\001\002\000\032\024\026\025\040\026\032\030\021"
            + "\032\023\034\030\037\035\050\031\051\034\052\027\054"
            + "\036\055\025\001\002\000\110\004\uffd6\005\uffd6\006\uffd6"
            + "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015"
            + "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6"
            + "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035"
            + "\uffd6\036\uffd6\040\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6"
            + "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\001"
            + "\002\000\034\024\026\025\040\026\032\027\116\030\021"
            + "\032\023\034\030\037\035\050\031\051\034\052\027\054"
            + "\036\055\025\001\002\000\110\004\uffdd\005\uffdd\006\uffdd"
            + "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015"
            + "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd"
            + "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035"
            + "\uffdd\036\uffdd\040\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd"
            + "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\001"
            + "\002\000\110\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5"
            + "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017"
            + "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5"
            + "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\040"
            + "\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5"
            + "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000\004\052"
            + "\107\001\002\000\110\004\uffd4\005\uffd4\006\uffd4\007\uffd4"
            + "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016"
            + "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4"
            + "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036"
            + "\uffd4\040\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4"
            + "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000"
            + "\070\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4"
            + "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020"
            + "\ufff4\021\ufff4\022\ufff4\023\ufff4\027\ufff4\031\ufff4\033\ufff4"
            + "\035\ufff4\036\ufff4\040\ufff4\043\ufff4\044\ufff4\046\ufff4\047"
            + "\ufff4\053\ufff4\001\002\000\030\024\026\025\040\026\032"
            + "\030\021\032\023\034\030\050\031\051\034\052\027\054"
            + "\036\055\025\001\002\000\070\004\047\005\062\006\042"
            + "\007\057\010\043\011\063\012\046\013\045\014\053\015"
            + "\054\016\061\017\044\020\050\021\055\022\056\023\060"
            + "\027\ufff1\031\ufff1\033\ufff1\035\ufff1\036\ufff1\040\ufff1\043"
            + "\ufff1\044\ufff1\046\051\047\ufff1\053\052\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\030"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\054"
            + "\004\047\005\062\006\042\007\057\010\043\017\uffeb\020"
            + "\uffeb\021\uffeb\022\uffeb\023\uffeb\027\uffeb\031\uffeb\033\uffeb"
            + "\035\uffeb\036\uffeb\040\uffeb\043\uffeb\044\uffeb\046\051\047"
            + "\uffeb\053\uffeb\001\002\000\070\004\uffef\005\uffef\006\042"
            + "\007\057\010\043\011\uffef\012\uffef\013\uffef\014\uffef\015"
            + "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef"
            + "\027\uffef\031\uffef\033\uffef\035\uffef\036\uffef\040\uffef\043"
            + "\uffef\044\uffef\046\051\047\uffef\053\uffef\001\002\000\054"
            + "\004\047\005\062\006\042\007\057\010\043\017\uffe6\020"
            + "\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\031\uffe6\033\uffe6"
            + "\035\uffe6\036\uffe6\040\uffe6\043\uffe6\044\uffe6\046\051\047"
            + "\uffe6\053\uffe6\001\002\000\070\004\047\005\062\006\042"
            + "\007\057\010\043\011\063\012\046\013\045\014\053\015"
            + "\054\016\061\017\044\020\050\021\055\022\056\023\060"
            + "\027\uffe2\031\uffe2\033\uffe2\035\uffe2\036\uffe2\040\uffe2\043"
            + "\uffe2\044\uffe2\046\051\047\uffe2\053\052\001\002\000\070"
            + "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012"
            + "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed"
            + "\021\uffed\022\uffed\023\uffed\027\uffed\031\uffed\033\uffed\035"
            + "\uffed\036\uffed\040\uffed\043\uffed\044\uffed\046\051\047\uffed"
            + "\053\uffed\001\002\000\070\004\047\005\062\006\042\007"
            + "\057\010\043\011\063\012\046\013\045\014\053\015\054"
            + "\016\061\017\044\020\050\021\055\022\056\023\060\027"
            + "\uffe1\031\uffe1\033\uffe1\035\uffe1\036\uffe1\040\uffe1\043\uffe1"
            + "\044\uffe1\046\051\047\uffe1\053\052\001\002\000\070\004"
            + "\047\005\062\006\042\007\057\010\043\011\063\012\046"
            + "\013\045\014\053\015\054\016\061\017\044\020\050\021"
            + "\055\022\uffe3\023\uffe3\027\uffe3\031\uffe3\033\uffe3\035\uffe3"
            + "\036\uffe3\040\uffe3\043\uffe3\044\uffe3\046\051\047\uffe3\053"
            + "\uffe3\001\002\000\054\004\047\005\062\006\042\007\057"
            + "\010\043\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\027"
            + "\uffe7\031\uffe7\033\uffe7\035\uffe7\036\uffe7\040\uffe7\043\uffe7"
            + "\044\uffe7\046\051\047\uffe7\053\uffe7\001\002\000\054\004"
            + "\047\005\062\006\042\007\057\010\043\017\uffe8\020\uffe8"
            + "\021\uffe8\022\uffe8\023\uffe8\027\uffe8\031\uffe8\033\uffe8\035"
            + "\uffe8\036\uffe8\040\uffe8\043\uffe8\044\uffe8\046\051\047\uffe8"
            + "\053\uffe8\001\002\000\070\004\047\005\062\006\042\007"
            + "\057\010\043\011\063\012\046\013\045\014\053\015\054"
            + "\016\061\017\044\020\050\021\055\022\056\023\060\027"
            + "\uffe0\031\uffe0\033\uffe0\035\uffe0\036\uffe0\040\uffe0\043\uffe0"
            + "\044\uffe0\046\051\047\uffe0\053\052\001\002\000\070\004"
            + "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf"
            + "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021"
            + "\uffdf\022\uffdf\023\uffdf\027\uffdf\031\uffdf\033\uffdf\035\uffdf"
            + "\036\uffdf\040\uffdf\043\uffdf\044\uffdf\046\051\047\uffdf\053"
            + "\uffdf\001\002\000\070\004\047\005\062\006\042\007\057"
            + "\010\043\011\063\012\046\013\045\014\053\015\054\016"
            + "\061\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4"
            + "\031\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\043\uffe4\044"
            + "\uffe4\046\051\047\uffe4\053\uffe4\001\002\000\070\004\ufff0"
            + "\005\ufff0\006\042\007\057\010\043\011\ufff0\012\ufff0\013"
            + "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0"
            + "\022\ufff0\023\ufff0\027\ufff0\031\ufff0\033\ufff0\035\ufff0\036"
            + "\ufff0\040\ufff0\043\ufff0\044\ufff0\046\051\047\ufff0\053\ufff0"
            + "\001\002\000\054\004\047\005\062\006\042\007\057\010"
            + "\043\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\027\uffea"
            + "\031\uffea\033\uffea\035\uffea\036\uffea\040\uffea\043\uffea\044"
            + "\uffea\046\051\047\uffea\053\uffea\001\002\000\054\004\047"
            + "\005\062\006\042\007\057\010\043\017\uffe9\020\uffe9\021"
            + "\uffe9\022\uffe9\023\uffe9\027\uffe9\031\uffe9\033\uffe9\035\uffe9"
            + "\036\uffe9\040\uffe9\043\uffe9\044\uffe9\046\051\047\uffe9\053"
            + "\uffe9\001\002\000\070\004\047\005\062\006\042\007\057"
            + "\010\043\011\063\012\046\013\045\014\053\015\054\016"
            + "\061\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027\uffe5"
            + "\031\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\043\uffe5\044"
            + "\uffe5\046\051\047\uffe5\053\uffe5\001\002\000\070\004\uffec"
            + "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013"
            + "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec"
            + "\022\uffec\023\uffec\027\uffec\031\uffec\033\uffec\035\uffec\036"
            + "\uffec\040\uffec\043\uffec\044\uffec\046\051\047\uffec\053\uffec"
            + "\001\002\000\070\004\uffee\005\uffee\006\uffee\007\uffee\010"
            + "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee"
            + "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\027\uffee\031"
            + "\uffee\033\uffee\035\uffee\036\uffee\040\uffee\043\uffee\044\uffee"
            + "\046\051\047\uffee\053\uffee\001\002\000\004\040\113\001"
            + "\002\000\006\045\010\052\012\001\002\000\006\040\ufff7"
            + "\043\111\001\002\000\004\052\107\001\002\000\004\040"
            + "\ufff8\001\002\000\032\024\026\025\040\026\032\030\021"
            + "\032\023\034\030\037\035\050\031\051\034\052\027\054"
            + "\036\055\025\001\002\000\070\004\ufffa\005\ufffa\006\ufffa"
            + "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015"
            + "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa"
            + "\027\ufffa\031\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa\043"
            + "\ufffa\044\ufffa\046\ufffa\047\ufffa\053\ufffa\001\002\000\012"
            + "\027\122\043\120\044\123\047\121\001\002\000\110\004"
            + "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd"
            + "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021"
            + "\uffcd\022\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd"
            + "\032\uffcd\033\uffcd\035\uffcd\036\uffcd\040\uffcd\043\uffcd\044"
            + "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd"
            + "\054\uffcd\055\uffcd\001\002\000\110\004\uffd2\005\uffd2\006"
            + "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2"
            + "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023"
            + "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2"
            + "\035\uffd2\036\uffd2\040\uffd2\043\uffd2\044\uffd2\046\uffd2\047"
            + "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2"
            + "\001\002\000\034\024\026\025\040\026\032\027\144\030"
            + "\021\032\023\034\030\037\035\050\031\051\034\052\027"
            + "\054\036\055\025\001\002\000\034\024\026\025\040\026"
            + "\032\027\140\030\021\032\023\034\030\037\035\050\031"
            + "\051\034\052\027\054\036\055\025\001\002\000\110\004"
            + "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce"
            + "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021"
            + "\uffce\022\uffce\023\uffce\026\uffce\027\uffce\030\uffce\031\uffce"
            + "\032\uffce\033\uffce\035\uffce\036\uffce\040\uffce\043\uffce\044"
            + "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce"
            + "\054\uffce\055\uffce\001\002\000\032\024\026\025\040\026"
            + "\032\030\021\032\023\034\030\037\035\050\031\051\034"
            + "\052\126\054\036\055\025\001\002\000\004\027\136\001"
            + "\002\000\006\027\uffc1\043\uffc1\001\002\000\076\004\uffdc"
            + "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013"
            + "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc"
            + "\022\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\042"
            + "\132\043\uffdc\045\133\046\uffdc\050\uffdc\051\uffdc\052\uffdc"
            + "\053\uffdc\054\uffdc\055\uffdc\001\002\000\006\027\uffc4\043"
            + "\130\001\002\000\032\024\026\025\040\026\032\030\021"
            + "\032\023\034\030\037\035\050\031\051\034\052\126\054"
            + "\036\055\025\001\002\000\004\027\uffc5\001\002\000\032"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\037"
            + "\035\050\031\051\034\052\027\054\036\055\025\001\002"
            + "\000\032\024\026\025\040\026\032\030\021\032\023\034"
            + "\030\037\035\050\031\051\034\052\027\054\036\055\025"
            + "\001\002\000\006\027\uffc3\043\uffc3\001\002\000\006\027"
            + "\uffc2\043\uffc2\001\002\000\110\004\uffcf\005\uffcf\006\uffcf"
            + "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015"
            + "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf"
            + "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035"
            + "\uffcf\036\uffcf\040\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf"
            + "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\001"
            + "\002\000\004\027\142\001\002\000\110\004\uffc6\005\uffc6"
            + "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014"
            + "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6"
            + "\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033"
            + "\uffc6\035\uffc6\036\uffc6\040\uffc6\043\uffc6\044\uffc6\046\uffc6"
            + "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055"
            + "\uffc6\001\002\000\110\004\uffd1\005\uffd1\006\uffd1\007\uffd1"
            + "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016"
            + "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1"
            + "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036"
            + "\uffd1\040\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1"
            + "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002\000"
            + "\110\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7"
            + "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020"
            + "\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7"
            + "\031\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\040\uffc7\043"
            + "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7"
            + "\053\uffc7\054\uffc7\055\uffc7\001\002\000\010\027\151\043"
            + "\147\047\150\001\002\000\110\004\uffc8\005\uffc8\006\uffc8"
            + "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015"
            + "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8"
            + "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035"
            + "\uffc8\036\uffc8\040\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8"
            + "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\001"
            + "\002\000\110\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0"
            + "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017"
            + "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\026\uffd0\027\uffd0"
            + "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040"
            + "\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0"
            + "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\110\004"
            + "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb"
            + "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021"
            + "\uffcb\022\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb"
            + "\032\uffcb\033\uffcb\035\uffcb\036\uffcb\040\uffcb\043\uffcb\044"
            + "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb"
            + "\054\uffcb\055\uffcb\001\002\000\034\024\026\025\040\026"
            + "\032\027\144\030\021\032\023\034\030\037\035\050\031"
            + "\051\034\052\027\054\036\055\025\001\002\000\034\024"
            + "\026\025\040\026\032\027\140\030\021\032\023\034\030"
            + "\037\035\050\031\051\034\052\027\054\036\055\025\001"
            + "\002\000\110\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9"
            + "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017"
            + "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9"
            + "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\040"
            + "\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9"
            + "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002\000\110\004"
            + "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc"
            + "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021"
            + "\uffcc\022\uffcc\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc"
            + "\032\uffcc\033\uffcc\035\uffcc\036\uffcc\040\uffcc\043\uffcc\044"
            + "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc"
            + "\054\uffcc\055\uffcc\001\002\000\006\027\151\043\147\001"
            + "\002\000\110\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca"
            + "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017"
            + "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca\027\uffca"
            + "\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\040"
            + "\uffca\043\uffca\044\uffca\046\uffca\047\uffca\050\uffca\051\uffca"
            + "\052\uffca\053\uffca\054\uffca\055\uffca\001\002\000\004\035"
            + "\156\001\002\000\032\024\026\025\040\026\032\030\021"
            + "\032\023\034\030\037\035\050\031\051\034\052\027\054"
            + "\036\055\025\001\002\000\004\036\160\001\002\000\032"
            + "\024\026\025\040\026\032\030\021\032\023\034\030\037"
            + "\035\050\031\051\034\052\027\054\036\055\025\001\002"
            + "\000\070\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011"
            + "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6"
            + "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\027\ufff6\031\ufff6\033"
            + "\ufff6\035\ufff6\036\ufff6\040\ufff6\043\ufff6\044\ufff6\046\ufff6"
            + "\047\ufff6\053\ufff6\001\002\000\070\004\047\005\062\006"
            + "\042\007\057\010\043\011\063\012\046\013\045\014\053"
            + "\015\054\016\061\017\044\020\050\021\055\022\056\023"
            + "\060\027\ufff2\031\ufff2\033\ufff2\035\ufff2\036\ufff2\040\ufff2"
            + "\043\ufff2\044\ufff2\046\051\047\ufff2\053\052\001\002\000"
            + "\110\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde"
            + "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020"
            + "\uffde\021\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde"
            + "\031\uffde\032\uffde\033\uffde\035\uffde\036\uffde\040\uffde\043"
            + "\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde"
            + "\053\uffde\054\uffde\055\uffde\001\002\000\004\033\171\001"
            + "\002\000\006\041\166\052\165\001\002\000\032\024\026"
            + "\025\040\026\032\030\021\032\023\034\030\037\035\050"
            + "\031\051\034\052\027\054\036\055\025\001\002\000\004"
            + "\033\uffd8\001\002\000\004\033\uffd7\001\002\000\110\004"
            + "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda"
            + "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021"
            + "\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda"
            + "\032\uffda\033\uffda\035\uffda\036\uffda\040\uffda\043\uffda\044"
            + "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda"
            + "\054\uffda\055\uffda\001\002\000\004\031\173\001\002\000"
            + "\110\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9"
            + "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020"
            + "\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9"
            + "\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\040\uffd9\043"
            + "\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9"
            + "\053\uffd9\054\uffd9\055\uffd9\001\002\000\004\002\000\001"
            + "\002\000\010\002\ufffd\003\004\052\007\001\002\000\004"
            + "\002\ufffe\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\174\000\006\002\005\003\004\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\004\005\010"
            + "\001\001\000\020\006\017\007\016\011\015\012\036\013"
            + "\023\014\032\015\021\001\001\000\002\001\001\000\004"
            + "\005\012\001\001\000\002\001\001\000\004\003\014\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\020\006\171\007\016\011\015\012"
            + "\036\013\023\014\032\015\021\001\001\000\002\001\001"
            + "\000\004\010\163\001\001\000\006\014\162\015\021\001"
            + "\001\000\002\001\001\000\016\007\161\011\015\012\036"
            + "\013\023\014\032\015\021\001\001\000\002\001\001\000"
            + "\020\006\154\007\016\011\015\012\036\013\023\014\032"
            + "\015\021\001\001\000\002\001\001\000\022\006\114\007"
            + "\016\011\015\012\036\013\023\014\032\015\021\016\116"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\004"
            + "\105\001\001\000\002\001\001\000\002\001\001\000\016"
            + "\007\040\011\015\012\036\013\023\014\032\015\021\001"
            + "\001\000\002\001\001\000\016\007\104\011\015\012\036"
            + "\013\023\014\032\015\021\001\001\000\016\007\103\011"
            + "\015\012\036\013\023\014\032\015\021\001\001\000\016"
            + "\007\102\011\015\012\036\013\023\014\032\015\021\001"
            + "\001\000\016\007\101\011\015\012\036\013\023\014\032"
            + "\015\021\001\001\000\016\007\100\011\015\012\036\013"
            + "\023\014\032\015\021\001\001\000\016\007\077\011\015"
            + "\012\036\013\023\014\032\015\021\001\001\000\016\007"
            + "\076\011\015\012\036\013\023\014\032\015\021\001\001"
            + "\000\016\007\075\011\015\012\036\013\023\014\032\015"
            + "\021\001\001\000\016\007\074\011\015\012\036\013\023"
            + "\014\032\015\021\001\001\000\016\007\073\011\015\012"
            + "\036\013\023\014\032\015\021\001\001\000\016\007\072"
            + "\011\015\012\036\013\023\014\032\015\021\001\001\000"
            + "\016\007\071\011\015\012\036\013\023\014\032\015\021"
            + "\001\001\000\016\007\070\011\015\012\036\013\023\014"
            + "\032\015\021\001\001\000\016\007\067\011\015\012\036"
            + "\013\023\014\032\015\021\001\001\000\016\007\066\011"
            + "\015\012\036\013\023\014\032\015\021\001\001\000\016"
            + "\007\065\011\015\012\036\013\023\014\032\015\021\001"
            + "\001\000\016\007\064\011\015\012\036\013\023\014\032"
            + "\015\021\001\001\000\016\007\063\011\015\012\036\013"
            + "\023\014\032\015\021\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\002\001\001\000\004\005\107\001\001\000\002"
            + "\001\001\000\004\004\111\001\001\000\002\001\001\000"
            + "\020\006\113\007\016\011\015\012\036\013\023\014\032"
            + "\015\021\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\024\006\142\007\016"
            + "\011\015\012\036\013\023\014\032\015\021\017\145\021"
            + "\144\001\001\000\022\006\136\007\016\011\015\012\036"
            + "\013\023\014\032\015\021\020\140\001\001\000\002\001"
            + "\001\000\024\006\124\007\016\011\015\012\036\013\023"
            + "\014\032\015\021\022\123\023\126\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\024\006\124\007\016\011\015\012\036\013\023\014"
            + "\032\015\021\022\130\023\126\001\001\000\002\001\001"
            + "\000\020\006\134\007\016\011\015\012\036\013\023\014"
            + "\032\015\021\001\001\000\020\006\133\007\016\011\015"
            + "\012\036\013\023\014\032\015\021\001\001\000\002\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\022\006\152\007\016\011\015\012\036\013"
            + "\023\014\032\015\021\017\153\001\001\000\022\006\136"
            + "\007\016\011\015\012\036\013\023\014\032\015\021\020"
            + "\151\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\020\006"
            + "\156\007\016\011\015\012\036\013\023\014\032\015\021"
            + "\001\001\000\002\001\001\000\020\006\160\007\016\011"
            + "\015\012\036\013\023\014\032\015\021\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
            + "\001\000\004\010\166\001\001\000\020\006\167\007\016"
            + "\011\015\012\036\013\023\014\032\015\021\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001\000\002\001\001\000\004\003"
            + "\175\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(final int act_num,
            final java_cup.runtime.lr_parser parser,
            final java.util.Stack stack, final int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan() throws java.lang.Exception {
        return getScanner().next_token();
    }

    public Module parseValue() throws Exception {
        final Module m = (Module) parse().value;
        if (!err.isEmpty()) {
            final StringBuilder sb = new StringBuilder();
            for (final ParseError pe : err) {
                final Symbol s = pe.getSymbol();
                sb.append("Error: ");
                sb.append(pe.getMessage());
                sb.append(" for ");
                sb.append(xi.lexer.Lexer.getPrettySymbol(s));
                sb.append(" at ");
                sb.append(xi.lexer.Lexer.getPosition(s));
                sb.append(xi.util.StringUtils.NL);
            }
            throw new Exception(sb.toString());
        }
        m.unLetAll();
        return m;
    }

    public Module addDefinition(final Module m, final String nm, final Expr e) {
        final Name n = Name.valueOf(nm);
        if (e == ParseError.expr) {
            return m;
        }
        try {
            m.addDefinition(n, e);
        } catch (final Exception ex) {
            final java_cup.runtime.Symbol s = symbolFactory.newSymbol("DEF",
                    Terminal.DEF, m.getForName(n));
            report_error("Duplicate definition \"" + n + "\"", s);
        }
        return m;
    }

    public final java.util.List<ParseError> err = new LinkedList<ParseError>();

    public ParseError addError(final Symbol sym, final String msg) {
        final ParseError e = new ParseError(sym, msg);
        err.add(e);
        return e;
    }

    public void report_error(final String message, final Object info) {
        if (info instanceof Symbol) {
            final Symbol s = (Symbol) info;
            addError(s, message);
            return;
        }
        super.report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code. */
@SuppressWarnings("all")
class CUP$Parser$actions {
    private final Parser parser;

    /** Constructor */
    CUP$Parser$actions(final Parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            final int CUP$Parser$act_num,
            final java_cup.runtime.lr_parser CUP$Parser$parser,
            final java.util.Stack CUP$Parser$stack, final int CUP$Parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 64: // sc_part ::= expr
        {
            ListComp.Part RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = ListComp.guard(e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("sc_part",
                    17, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 63: // sc_part ::= NAME FROM expr
        {
            ListComp.Part RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = ListComp.prod(n, e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("sc_part",
                    17, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 62: // sc_part ::= NAME DEF expr
        {
            ListComp.Part RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = ListComp.let(n, e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("sc_part",
                    17, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 61: // listcmp ::= sc_part
        {
            ListComp RESULT = null;
            final ListComp.Part p = (ListComp.Part) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new ListComp(p);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("listcmp",
                    16, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 60: // listcmp ::= sc_part COMMA listcmp
        {
            ListComp RESULT = null;
            final ListComp.Part p = (ListComp.Part) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final ListComp lc = (ListComp) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = lc.add(p);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("listcmp",
                    16, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 59: // e_to ::= BRACK_R
        {
            Expr RESULT = null;
            RESULT = null;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_to", 14,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 58: // e_to ::= expr BRACK_R
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = e;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_to", 14,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 57: // s_list ::= BRACK_R
        {
            Expr RESULT = null;
            RESULT = BuiltIn.NIL;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_list",
                    13, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 56: // s_list ::= expr BRACK_R
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = BuiltIn.CONS.app(e, BuiltIn.NIL);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_list",
                    13, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 55: // s_list ::= expr COMMA s_list
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.CONS.app(e, l);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_list",
                    13, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 54: // c_list ::= s_list
        {
            Expr[] RESULT = null;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new Expr[] { l };
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_list",
                    15, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 53: // c_list ::= expr ELLIPSE e_to
        {
            Expr[] RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new Expr[] { e, l };
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_list",
                    15, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 52: // list ::= BRACK_R
        {
            Expr RESULT = null;
            RESULT = BuiltIn.NIL;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("list", 12,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 51: // list ::= expr BRACK_R
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = BuiltIn.CONS.app(e, BuiltIn.NIL);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("list", 12,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 50: // list ::= expr SEMI listcmp BRACK_R
        {
            Expr RESULT = null;
            final Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 3)).value;
            final ListComp c = (ListComp) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = c.finish(v);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("list", 12,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 49: // list ::= expr COMMA c_list
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr[] l = (Expr[]) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = l.length == 2 ? ListComp.enumerate(e, l[0], l[1])
                    : BuiltIn.CONS.app(e, l[0]);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("list", 12,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 48: // list ::= expr ELLIPSE e_to
        {
            Expr RESULT = null;
            final Expr f = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr t = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = ListComp.enumerate(f, null, t);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("list", 12,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 47: // constant ::= BRACK_L list
        {
            Expr RESULT = null;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = l;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",
                    11, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 46: // constant ::= CHAR
        {
            Expr RESULT = null;
            final Character c = (Character) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = Char.valueOf(c);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",
                    11, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 45: // constant ::= STR
        {
            Expr RESULT = null;
            final String s = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = Str.fromString(s);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",
                    11, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 44: // constant ::= BLN
        {
            Expr RESULT = null;
            final Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = Bool.valueOf(b);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",
                    11, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 43: // constant ::= NUM
        {
            Expr RESULT = null;
            final BigInteger n = (BigInteger) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = Num.valueOf(n);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",
                    11, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 42: // lambdaexpr ::= NAME TO expr
        {
            Expr RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new Lambda(n, e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "lambdaexpr", 6, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 41: // lambdaexpr ::= NAME lambdaexpr
        {
            Expr RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new Lambda(n, l);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "lambdaexpr", 6, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 40: // simple ::= PAR_L expr PAR_R
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = e;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",
                    10, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 39: // simple ::= BRACE_L lambdaexpr BRACE_R
        {
            Expr RESULT = null;
            final Expr l = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = l;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",
                    10, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 38: // simple ::= constant
        {
            Expr RESULT = null;
            final Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = c;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",
                    10, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 37: // simple ::= NAME
        {
            Expr RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = Name.valueOf(n);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple",
                    10, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 36: // comb ::= simple
        {
            Expr RESULT = null;
            final Expr s = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = s;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("comb", 9,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 35: // comb ::= comb simple
        {
            Expr RESULT = null;
            final Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            final Expr s = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = App.create(c, s);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("comb", 9,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 34: // infixexpr ::= condexpr COMP condexpr
        {
            Expr RESULT = null;
            final Expr f = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr g = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            final Name x = Name.createName();
            RESULT = new Lambda(x.toString(), App.create(f, App.create(g, x)));
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 33: // infixexpr ::= condexpr INAME condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = App.create(Name.valueOf(n), x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 32: // infixexpr ::= condexpr APP condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = App.create(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 31: // infixexpr ::= condexpr SEQ condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.SEQ.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 30: // infixexpr ::= condexpr CONS condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.CONS.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 29: // infixexpr ::= condexpr OR condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.OR.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 28: // infixexpr ::= condexpr AND condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.AND.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 27: // infixexpr ::= condexpr GE condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.GE.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 26: // infixexpr ::= condexpr LE condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.LE.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 25: // infixexpr ::= condexpr GT condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.GT.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 24: // infixexpr ::= condexpr LT condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.LT.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 23: // infixexpr ::= condexpr NE condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.NE.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 22: // infixexpr ::= condexpr EQ condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.EQ.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 21: // infixexpr ::= condexpr MOD condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.MOD.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 20: // infixexpr ::= condexpr DIV condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.DIV.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 19: // infixexpr ::= condexpr TIMES condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.TIMES.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 18: // infixexpr ::= condexpr MINUS condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.MINUS.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 17: // infixexpr ::= condexpr PLUS condexpr
        {
            Expr RESULT = null;
            final Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr y = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.PLUS.app(x, y);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "infixexpr", 8, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 16: // prefixexpr ::= UMINUS condexpr
        {
            Expr RESULT = null;
            final Expr o = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.UMINUS.app(o);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "prefixexpr", 7, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 15: // prefixexpr ::= NOT condexpr
        {
            Expr RESULT = null;
            final Expr o = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.NOT.app(o);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol(
                    "prefixexpr", 7, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 14: // condexpr ::= comb
        {
            Expr RESULT = null;
            final Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = c;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",
                    5, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // condexpr ::= infixexpr
        {
            Expr RESULT = null;
            final Expr i = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = i;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",
                    5, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // condexpr ::= prefixexpr
        {
            Expr RESULT = null;
            final Expr p = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = p;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",
                    5, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // condexpr ::= IF expr THEN expr ELSE expr
        {
            Expr RESULT = null;
            final Expr i = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 4)).value;
            final Expr t = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = BuiltIn.BRANCH.app(i, t, e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("condexpr",
                    5, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // defs ::= NAME def
        {
            Module RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            final Expr d = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = parser.addDefinition(new Module(false), n, d);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("defs", 2,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // defs ::= NAME def COMMA defs
        {
            Module RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 3)).value;
            final Expr d = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Module ds = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = parser.addDefinition(ds, n, d);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("defs", 2,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // expr ::= condexpr
        {
            Expr RESULT = null;
            final Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = c;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 4,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // expr ::= LET defs IN expr
        {
            Expr RESULT = null;
            final Module ds = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new LetIn(ds, e);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 4,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // def ::= NAME def
        {
            Expr RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            final Expr d = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = new Lambda(n, d);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("def", 3,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // def ::= DEF expr
        {
            Expr RESULT = null;
            final Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = e;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("def", 3,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // module ::=
        {
            Module RESULT = null;
            RESULT = new Module(true);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",
                    1, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // module ::= error SEMI module
        {
            Module RESULT = null;
            final Module m = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = parser.addDefinition(m, "$ERROR$", ParseError.expr);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",
                    1, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // module ::= NAME def SEMI module
        {
            Module RESULT = null;
            final String n = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 3)).value;
            final Expr d = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 2)).value;
            final Module m = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = parser.addDefinition(m, n, d);
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",
                    1, RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= sasl EOF
        {
            Object RESULT = null;
            final Module start_val = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .elementAt(CUP$Parser$top - 1)).value;
            RESULT = start_val;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",
                    0, RESULT);
        }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // sasl ::= module
        {
            Module RESULT = null;
            final Module m = (Module) ((java_cup.runtime.Symbol) CUP$Parser$stack
                    .peek()).value;
            RESULT = m;
            CUP$Parser$result = parser.getSymbolFactory().newSymbol("sasl", 0,
                    RESULT);
        }
            return CUP$Parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
